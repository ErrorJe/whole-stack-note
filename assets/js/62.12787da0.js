(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{278:function(s,t,a){"use strict";a.r(t);var e=a(0),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"项目部署上线"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目部署上线"}},[s._v("#")]),s._v(" 项目部署上线")]),s._v(" "),a("h2",{attrs:{id:"部署流程详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署流程详解"}},[s._v("#")]),s._v(" 部署流程详解")]),s._v(" "),a("ul",[a("li",[s._v("前端静态资源")]),s._v(" "),a("li",[s._v("后端服务器，如 nodejs 环境")]),s._v(" "),a("li",[s._v("nginx 服务器")]),s._v(" "),a("li",[s._v("centOS 服务器")]),s._v(" "),a("li",[s._v("数据库服务器")])]),s._v(" "),a("h2",{attrs:{id:"服务器知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务器知识"}},[s._v("#")]),s._v(" 服务器知识")]),s._v(" "),a("h3",{attrs:{id:"阿里云-ecs-服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阿里云-ecs-服务器"}},[s._v("#")]),s._v(" 阿里云 ECS 服务器")]),s._v(" "),a("blockquote",[a("p",[s._v("虚拟化技术提供的远程服务器，容器弹性动态的")])]),s._v(" "),a("h4",{attrs:{id:"购买服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#购买服务器"}},[s._v("#")]),s._v(" 购买服务器")]),s._v(" "),a("ul",[a("li",[s._v("初始配置\n"),a("ul",[a("li",[s._v("包年包月")]),s._v(" "),a("li",[s._v("服务器位置：上海（后期用 CDN）")]),s._v(" "),a("li",[s._v("CPU：单核 1GB 自己玩")]),s._v(" "),a("li",[s._v("操作系统 centOS 6")]),s._v(" "),a("li",[s._v("系统盘 默认 40G")])])]),s._v(" "),a("li",[s._v("带宽：分配公网，价格涨很快")]),s._v(" "),a("li",[s._v("安全组：默认 80 端口")]),s._v(" "),a("li",[s._v("系统配置\n"),a("ul",[a("li",[s._v("实例名，随便改")])])]),s._v(" "),a("li",[s._v("订单生成，选择购买期限")]),s._v(" "),a("li",[s._v("支付")])]),s._v(" "),a("h4",{attrs:{id:"管理后台"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管理后台"}},[s._v("#")]),s._v(" 管理后台")]),s._v(" "),a("ul",[a("li",[s._v("重置服务器密码， 重启")]),s._v(" "),a("li",[s._v("通过 "),a("code",[s._v("ssh")]),s._v(" 连接服务器")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("ssh root@公网"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输入密码，此时是看不到输入的")]),s._v("\n")])])]),a("blockquote",[a("p",[s._v("如果连接不上要看一下 22 端口是否在安全组正常启用")])]),s._v(" "),a("ul",[a("li",[s._v("生成 SSH 密钥，避免每次手动登录(免密登录)")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("ssh"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("keygen "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("t rsa\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 若没生成过，一般按三次回车就完事")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 生成过的， 会提示你是否重写")]),s._v("\n\nssh"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("copy"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ssh"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("id_rsa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pub root@公网ip\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ... 输入密码，出现 `number if keys add`")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表示这个 ip 以后就是免密登录了")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 之后每次只要输入ip地址就可以免密登录")]),s._v("\nssh root@公网 ip\n")])])]),a("ul",[a("li",[s._v("修改 hosts 文件实现快速登录")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("sudo vim "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("etc"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("hosts\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输入服务器 ip 和映射的名")]),s._v("\n公网ip myService\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 之后就可以直接连接这个名字")]),s._v("\nssh root@myService\n")])])]),a("h4",{attrs:{id:"常用指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用指令"}},[s._v("#")]),s._v(" 常用指令")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("who "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 登录者")]),s._v("\n")])])]),a("p",[s._v("还有关于远程服务器自动断开连接的问题")]),s._v(" "),a("blockquote",[a("p",[s._v("阿里云服务器可能在你不操作的几分钟就会自动断开连接，所以我们要去开启自动连接的配置")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 主要是去改配置文件")]),s._v("\nvim "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("etc"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ssh"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("sshd_config\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 找打字段 ClientAliveinterval")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 关掉注释，并配置30（每30秒保持和客户端的连接）")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 刷新配置文件让其生效")]),s._v("\nservice sshd restart\n")])])]),a("h3",{attrs:{id:"https-证书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https-证书"}},[s._v("#")]),s._v(" HTTPS 证书")]),s._v(" "),a("p",[s._v("阿里云找到 SSL 证书，进行购买（可以选择免费型的 SSL）")]),s._v(" "),a("p",[s._v("绑定域名等待审核签发")]),s._v(" "),a("p",[s._v("之后就可以下载密钥（是一堆文件）")]),s._v(" "),a("h3",{attrs:{id:"域名注册和备案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#域名注册和备案"}},[s._v("#")]),s._v(" 域名注册和备案")]),s._v(" "),a("p",[s._v("先搜专辑喜欢的域名，去购买")]),s._v(" "),a("p",[s._v("然后去管理控制台进入域名管理")]),s._v(" "),a("p",[s._v("绑定自己的 IP 并解析")]),s._v(" "),a("p",[s._v("然后进行备案，不然就算解析成功，马上就会失效")]),s._v(" "),a("p",[s._v("按照备案流程就可以，第一次备案大概要1个月，拿到备案号，网站就合法")]),s._v(" "),a("h3",{attrs:{id:"nodejs-环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-环境"}},[s._v("#")]),s._v(" NodeJS 环境")]),s._v(" "),a("ul",[a("li",[s._v("先安装 nvm，相当于安装器")]),s._v(" "),a("li",[s._v("然后用 nvm 去安装 node")])]),s._v(" "),a("h3",{attrs:{id:"nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[s._v("#")]),s._v(" Nginx")]),s._v(" "),a("h4",{attrs:{id:"安装和编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装和编译"}},[s._v("#")]),s._v(" 安装和编译")]),s._v(" "),a("p",[s._v("window 直接安装就行，然后在安装目录找到配置文件。")]),s._v(" "),a("ul",[a("li",[s._v("用 "),a("code",[s._v("yum")]),s._v(" 安装 "),a("code",[s._v("nginx")]),s._v(" 需要的依赖，"),a("code",[s._v("yum -y install pcre*")])]),s._v(" "),a("li",[s._v("继续安装， "),a("code",[s._v("yum -y install openssl*")])]),s._v(" "),a("li",[s._v("新建 nginx 目录 "),a("code",[s._v("mkdir nginx")]),s._v(", 并进入 "),a("code",[s._v("cd nginx/")])]),s._v(" "),a("li",[s._v("下载 nginx, "),a("code",[s._v("wget http://nginx.org/download/nginx-1.12.2.tar.gz")]),s._v("（linux 上的压缩格式）")]),s._v(" "),a("li",[s._v("编译，所以还需要安装一些 gcc\n"),a("ul",[a("li",[s._v("先解压，"),a("code",[s._v("tar -zxvf nginx-1.12.2.tar.gz")])]),s._v(" "),a("li",[a("code",[s._v("cd nginx-1.12-2")]),s._v("， 看下有哪些文件 "),a("code",[s._v("ll")])]),s._v(" "),a("li",[s._v("执行文件 "),a("code",[s._v(".configure")])]),s._v(" "),a("li",[s._v("编译 "),a("code",[s._v("make -j4")])]),s._v(" "),a("li",[s._v("安装 "),a("code",[s._v("make install")])]),s._v(" "),a("li",[s._v("读取 nginx 配置文件，看是否安装成功，"),a("code",[s._v("/usr/local/nginx/sbin/nginx -t")])])])]),s._v(" "),a("li",[s._v("软连接 "),a("code",[s._v("ln -s /usr/local/nginx/sbin/nginx nginx")]),s._v("，相当于是快捷方式")]),s._v(" "),a("li",[s._v("回到 /root 路径，然后启动 nginx\n"),a("ul",[a("li",[a("code",[s._v("nginx")]),s._v("启动")]),s._v(" "),a("li",[a("code",[s._v("ps -ef|grep nginx")]),s._v(" 查看服务")]),s._v(" "),a("li",[a("code",[s._v("nginx -s stop")]),s._v(" 停止服务")])])])]),s._v(" "),a("h4",{attrs:{id:"配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[s._v("#")]),s._v(" 配置文件")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("cd /usr/local/nginx")])]),s._v(" "),a("li",[a("code",[s._v("cd conf/")])]),s._v(" "),a("li",[a("code",[s._v("vim nginx.conf")])])]),s._v(" "),a("p",[s._v("然后就可以开始按照需求配置")]),s._v(" "),a("h3",{attrs:{id:"filezilla"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filezilla"}},[s._v("#")]),s._v(" FileZilla")]),s._v(" "),a("p",[s._v("像 FTP 一样移动本地和服务器的文件")]),s._v(" "),a("h2",{attrs:{id:"前端项目打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端项目打包"}},[s._v("#")]),s._v(" 前端项目打包")]),s._v(" "),a("h3",{attrs:{id:"为什么要打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要打包"}},[s._v("#")]),s._v(" 为什么要打包")]),s._v(" "),a("p",[s._v("因为一些语法无法在浏览器中直接使用，还有一些如 "),a("code",[s._v(".vue")]),s._v(" 文件浏览器根本无法解析。")]),s._v(" "),a("p",[s._v("所以要利用 "),a("code",[s._v("webpack")]),s._v(" 进行打包。")]),s._v(" "),a("h3",{attrs:{id:"如何打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何打包"}},[s._v("#")]),s._v(" 如何打包")]),s._v(" "),a("p",[a("code",[s._v("npm run build:prod")]),s._v("（"),a("code",[s._v("vue-cli-service build")]),s._v("）")]),s._v(" "),a("p",[s._v("执行打包指令后，就会生成 "),a("code",[s._v("dist")]),s._v(" 目录文件，里面的 "),a("code",[s._v("index.html")]),s._v("就是整个单页面应用程序的主入口文件。")]),s._v(" "),a("blockquote",[a("p",[s._v("注意 index.html 中寻找静态资源路径，是在 "),a("code",[s._v("vue.config.js")]),s._v(" 中配置的，包括"),a("code",[s._v("publicPath, assetsDir")]),s._v(" 这两个字段的拼接而成")])]),s._v(" "),a("p",[a("code",[s._v("npm run build")]),s._v("会在根目录生成 "),a("code",[s._v("dist")]),s._v(" 文件夹，里面就是需要分发的前端打包后的资源")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm run build:prod // # 打包正式环境\nnpm run build:stage // # 打包预发布环境\n")])])]),a("p",[s._v("另外之前配置的环境变量文件，会选用生产环境下的配置文件 "),a("code",[s._v(".env.production")])]),s._v(" "),a("h3",{attrs:{id:"打包优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#打包优化"}},[s._v("#")]),s._v(" 打包优化")]),s._v(" "),a("h4",{attrs:{id:"优化预览：文件体积报告"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化预览：文件体积报告"}},[s._v("#")]),s._v(" 优化预览：文件体积报告")]),s._v(" "),a("blockquote",[a("p",[s._v("其关键点在于“按需加载”，无论是什么类库，还是图标都按需加载。这样打包的时候资源会小很多")]),s._v(" "),a("p",[s._v("若有一些问题，则可以直接在 "),a("code",[s._v("dist")]),s._v("目录下找到这个 HTML 文件，直接打开查看。")])]),s._v(" "),a("p",[a("code",[s._v("npm run build -- --report")]),s._v(" 打包报告，可以看各种文件和库体积占比。然后就可以按照提示访问这个报告页面，针对体积比较大的类库或者打包资源去优化。")]),s._v(" "),a("p",[s._v("在使用一些集成框架时，可能给你用了别的命令，所以要看文档。就比如 "),a("code",[s._v("vue-element-admin")]),s._v("就使用"),a("code",[s._v("npm run preview -- --report")]),s._v("， report.html 会出现在 dist 目录下。可以直接打开这个文件查看信息。")]),s._v(" "),a("h4",{attrs:{id:"类库的引入方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类库的引入方式"}},[s._v("#")]),s._v(" 类库的引入方式")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 第一种是引入了某个方法，第二个是全部引入然后选择了其中一个方法\nimport debounce from '/debounce'\nimport {debounce} from 'lodash'\n\n// 对于 echart 也是类似的处理\nimport echarts from 'echartslib/echarts' // 引入核心包\nimport 'echarts/lib/chart/bar' // 引入 柱状图\nimport 'echarts/lib/component/title' // 引入标题配置组件\n")])])]),a("h4",{attrs:{id:"优先处理打包后体积较大的包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优先处理打包后体积较大的包"}},[s._v("#")]),s._v(" 优先处理打包后体积较大的包")]),s._v(" "),a("p",[s._v("一般来说会有这样几个包会比较大")]),s._v(" "),a("blockquote",[a("p",[s._v("可以参照这个 issue 325")]),s._v(" "),a("p",[s._v("https://github.com/vueComponent/ant-design-vue/issues/325")])]),s._v(" "),a("ul",[a("li",[s._v("类库的使用")]),s._v(" "),a("li",[s._v("对图标资源的打包")]),s._v(" "),a("li",[s._v("moment 的语言包")])]),s._v(" "),a("h4",{attrs:{id:"优化图片资源打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化图片资源打包"}},[s._v("#")]),s._v(" 优化图片资源打包")]),s._v(" "),a("h5",{attrs:{id:"创建专用图标引入库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建专用图标引入库"}},[s._v("#")]),s._v(" 创建专用图标引入库")]),s._v(" "),a("blockquote",[a("p",[s._v("每个需要在加载时用到的图标都需要这样导出，所以也是比较麻烦的。")]),s._v(" "),a("p",[s._v("但是目前好像也没有什么其他方式，这里要仔细不要漏掉图标")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// src/icons.js\nexport {\n  default as SmileOutline\n} from '@ant-design/icons/lib/outline/SettingOutline';\n")])])]),a("h5",{attrs:{id:"配置-vue-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-vue-config"}},[s._v("#")]),s._v(" 配置 vue.config")]),s._v(" "),a("p",[s._v("起一个别名")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// vue.config.js\nmodule.exports = {\n  configureWebpack: {\n    resolve: {\n      alias: {\n        "@ant-design/icons/lib/dist$": path.resolve(__dirname, "./src/icons.js")\n      }\n    }\n  }\n};\n')])])]),a("h4",{attrs:{id:"优化-moment-库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化-moment-库"}},[s._v("#")]),s._v(" 优化 moment 库")]),s._v(" "),a("p",[s._v("也是利用 webpack 插件的形式去干掉 moment 库里的语言包")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// vue.config.js\nconst webpack = require('webpack')\n\nmodule.exports = {\n  //...\n  configureWebpack: {\n    plugins: [\n      // 忽略所有在 moment 中的语言包\n      new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/),\n    ],\n  }\n};\n")])])]),a("p",[s._v("对需要用到的语言包去按需加载")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// App.vue 按需引入中文包\nimport 'moment/locale/zh-cn'\n")])])]),a("h3",{attrs:{id:"什么是部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是部署"}},[s._v("#")]),s._v(" 什么是部署")]),s._v(" "),a("p",[s._v("所谓的部署，也就是把 "),a("code",[s._v("dist")]),s._v(" 目录文件都复制到 "),a("code",[s._v("nginx")]),s._v(" 配置的某个目录下。（"),a("code",[s._v("index.html")]),s._v(" 也可以在打包后直接双击运行，如果静态资源能够被正确找到，并且接口是通的情况下。）")]),s._v(" "),a("p",[s._v("当然，"),a("code",[s._v("index.html")]),s._v(" 要在web容器下才能真的正常运行。在任意目录双击打开网页可能没啥用，就是在本地也是要放在 nginx 目录下才行。")]),s._v(" "),a("h3",{attrs:{id:"前端部署-shell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端部署-shell"}},[s._v("#")]),s._v(" 前端部署 shell")]),s._v(" "),a("p",[s._v("我们可以通过编写 shell 来减轻部署压力")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("cd "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("root"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("admin"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("admin"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("fe\ngit pull\ncnpm i\nnpm run build\nrm "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("rf "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("upload"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("admin\nmv dist "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("upload"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("admin\n")])])]),a("h3",{attrs:{id:"nginx-部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-部署"}},[s._v("#")]),s._v(" Nginx 部署")]),s._v(" "),a("blockquote",[a("p",[s._v("部署只需要将最终生成的 dist 静态资源目录发布到 cdn 或者 静态资源服务器中就行ing。")]),s._v(" "),a("p",[s._v("现在一般用nginx作为web服务器")])]),s._v(" "),a("h4",{attrs:{id:"配置-nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-nginx"}},[s._v("#")]),s._v(" 配置 nginx")]),s._v(" "),a("blockquote",[a("p",[s._v("在 nginx 根目录下的 conf 中， nginx.conf")]),s._v(" "),a("p",[s._v("原本直接将整个 dist 文件复制就行，如果在 vue.config.js 配置了上下文"),a("code",[s._v("publicPath: 'best-practice'")]),s._v("，那么要 dist/best-practice/其余文件目录")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 1 项目根目录, 两个 \\\\ 是为了在 window 下转义\nroot C:\\\\Users\\\\xxxx\\\\projects\\\\vue\\\\dist\n\n// 2 配置文件\nlocation /best-practice {\n  # 尝试访问路径所对应的文件或目录\n  # 就是当访问路径不是静态资源时，会回退到这个配置路径\n  # 对应了 vue 的 histroy 模式\n  # 比如访问 localhost/best-practice 就是会转到 index.html\n  # 因为 vue 是单页面程序，所有的路由访问其实都是在 index.html 中进行的，若不这样配置第一次进去正常后面发生页面刷新之类的就会找不到资源\n  try_files $url /best-practice/index.html\n}\n\n// 3 nginx 反向代理 ，增加访问前缀\n// 当接口匹配到这前缀，就在做代理转发\n// 多个 location 是为了区分多个项目\nlocation ^~ /user/ {\n  proxy_pass http://localhost:3000\n}\n")])])]),a("h4",{attrs:{id:"启动-nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动-nginx"}},[s._v("#")]),s._v(" 启动 nginx")]),s._v(" "),a("p",[s._v("到 nginx 安装目录下 "),a("code",[s._v("start nginx")])]),s._v(" "),a("p",[s._v("nginx 默认端口是 80")]),s._v(" "),a("h2",{attrs:{id:"后端项目部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后端项目部署"}},[s._v("#")]),s._v(" 后端项目部署")]),s._v(" "),a("blockquote",[a("p",[s._v("写一个 shell 脚本来执行一些服务端行为")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'直接定位到 服务端 目录'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /root/wechat/node-back\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'拉取最新代码'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" pull\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'杀掉所有 node 服务后重启服务'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" -9 "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -ef"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" node"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" app.js"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v("}'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\nnode app.js "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'更新后台端'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /root/wechat/node-pc\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'拉取最新代码'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" pull\nnode app.js "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'H5 服务端'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /root/node-h5\nnode app.js "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);