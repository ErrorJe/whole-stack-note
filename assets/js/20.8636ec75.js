(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{237:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"堆栈内存机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆栈内存机制"}},[t._v("#")]),t._v(" 堆栈内存机制")]),t._v(" "),s("blockquote",[s("p",[t._v("也是 V8 引擎做的事情")])]),t._v(" "),s("h3",{attrs:{id:"存储数据类型的堆栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储数据类型的堆栈"}},[t._v("#")]),t._v(" 存储数据类型的堆栈")]),t._v(" "),s("h4",{attrs:{id:"js-中的堆（heap）栈（stack）概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-中的堆（heap）栈（stack）概念"}},[t._v("#")]),t._v(" JS 中的堆（heap）栈（stack）概念")]),t._v(" "),s("ul",[s("li",[t._v("栈内存：提供代码运行环境，存储基本类型值")]),t._v(" "),s("li",[t._v("堆内存：提供引用类型存储的空间，存储相应的代码字符串")]),t._v(" "),s("li",[t._v("值存储区（变量对象 VO —— Varibale Object）：用来存储变量名")])]),t._v(" "),s("h4",{attrs:{id:"基本类型的栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本类型的栈"}},[t._v("#")]),t._v(" 基本类型的栈")]),t._v(" "),s("blockquote",[s("p",[t._v("其实都是指针引用")])]),t._v(" "),s("p",[t._v("基本类型的 "),s("code",[t._v("等号赋值")]),t._v("实际上要走三步：")]),t._v(" "),s("ol",[s("li",[t._v("在 "),s("code",[t._v("VO")]),t._v(" 中创建变量")]),t._v(" "),s("li",[t._v("在 "),s("code",[t._v("栈")]),t._v(" 中创建值")]),t._v(" "),s("li",[t._v("将变量和值进行关联")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 VO 创建变量 a， 在栈中创建值 0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 VO 创建变量 b， 指向上面那个 0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b=b+1=0+1 ，栈里存入一个 1，基本类型只能关联一个值，所以与 0 断开，与 1 联系")]),t._v("\nb"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '0'， alert 都会用 toString 输出")]),t._v("\n")])])]),s("h4",{attrs:{id:"引用类型的堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用类型的堆"}},[t._v("#")]),t._v(" 引用类型的堆")]),t._v(" "),s("p",[t._v("表示堆内存的地址，是一个十六进制的字符")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 VO 中创建 o 变量，在堆（heap）中创建一个内存块，并把指向该内存块的地址存入栈中")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在该内存卡中创建 a 属性，并赋值 0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" o "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b 一样指向 o 的堆内存地址")]),t._v("\nb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把原本为 0 的 a 值改为了 10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '10'")]),t._v("\n")])])]),s("h4",{attrs:{id:"阿里面试题分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阿里面试题分析"}},[t._v("#")]),t._v(" 阿里面试题分析")]),t._v(" "),s("p",[t._v("第一步，创建 "),s("code",[t._v("a")]),t._v(" 变量，创建在堆中创建 "),s("code",[t._v("n")]),t._v(" 属性并赋值 "),s("code",[t._v("1")]),t._v(" ，最后把该堆内存地址放入栈中，并与变量 "),s("code",[t._v("a")]),t._v(" 进行关联。\n第二步，创建变量 "),s("code",[t._v("b")]),t._v(" 同时指向了该地址\n"),s("img",{attrs:{src:"https://raw.githubusercontent.com/ErrorJe/ErrorJE.github.io/images/img/20200119112034.png",alt:""}})]),t._v(" "),s("p",[t._v("然后我们再来看看，第三行代码在堆栈中是如何操作的。， "),s("code",[t._v("a.x = a = {n:2}")])]),t._v(" "),s("p",[t._v("一般的思路理解，就是等式 "),s("code",[t._v("从右向左")]),t._v(" 执行，但实际上:")]),t._v(" "),s("blockquote",[s("p",[t._v("找到 a 和 a.x 的指针。如果已有指针，那么不改变它。如果没有指针，即那个变量还没被申明，那么就创建它，指向 null\n也就是，所有的赋值操作，其实就是先创建值，在创建变量，最后依次指向")])]),t._v(" "),s("ul",[s("li",[t._v("因为已经有 "),s("code",[t._v("a")]),t._v(" 变量，所以，不会再次进行变量创建。")]),t._v(" "),s("li",[t._v("但是 "),s("code",[t._v("a.x")]),t._v(" 是没有的，所以要先创建。于是在原有的堆中增加了 x 属性")]),t._v(" "),s("li",[t._v("最后让 a, a.x 都指向新的内存")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/ErrorJe/ErrorJE.github.io/images/img/20200119112047.png",alt:""}})]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第三行代码")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined。因为此时 a 指向的是新的堆内存，其中并没有 x 属性")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {n:1,x:{n:2}}。b 指向的是原有 a 的堆内存")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);