(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{253:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"五、构造函数和原型对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、构造函数和原型对象"}},[t._v("#")]),t._v(" 五、构造函数和原型对象")]),t._v(" "),a("p",[t._v("JS 缺少类（至少 ES6 之前是这样），利用"),a("code",[t._v("构造函数")]),t._v("和"),a("code",[t._v("原型对象")]),t._v("给对象带来与类相似的功能，但不完全一致。")]),t._v(" "),a("h3",{attrs:{id:"_1-构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-构造函数"}},[t._v("#")]),t._v(" 1 构造函数")]),t._v(" "),a("blockquote",[a("p",[t._v("就是用 new 创建对象时调用的函数。")]),t._v(" "),a("p",[t._v("用一个构造函数创建的实例都拥有同样的属性和方法。这也是使用它的原因。")]),t._v(" "),a("p",[t._v("行业约定构造函数首字母大写，就跟私有变量约定首字符为 "),a("code",[t._v("_")]),t._v("一样")])]),t._v(" "),a("h4",{attrs:{id:"_1）new-操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1）new-操作符"}},[t._v("#")]),t._v(" 1）new 操作符")]),t._v(" "),a("p",[a("code",[t._v("new")]),t._v(" 操作符自动创建给定类型的对象并返回。")]),t._v(" "),a("p",[t._v("这些实例都独立拥有构造函数的变量和方法。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以声明一些变量和方法")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wjy'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sayName")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若这里显式 return 了一个对象，则会返回该对象。return 原始类型是无效的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有参数传入时，可以省略括号")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 被创建的实例拥有原来在构造函数中的变量和方法")]),t._v("\nobj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'wjy'")]),t._v("\nobj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nobj1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("若不用 "),a("code",[t._v("new")]),t._v(" 调用构造函数，那么原本构造函数中的 this 都是指向全局的，容易出现错误。")]),t._v(" "),a("h4",{attrs:{id:"_2）构造函数属性-constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2）构造函数属性-constructor"}},[t._v("#")]),t._v(" 2）构造函数属性 constructor")]),t._v(" "),a("p",[t._v("对象实例拥有的原生属性，指向创建它的构造函数")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("obj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Fn "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("但是任然建议使用 "),a("code",[t._v("instanceof")]),t._v("来判断实例是否属于某个构造函数。因为 "),a("code",[t._v("constructor")]),t._v("会被覆盖，不是很准确。")]),t._v(" "),a("h3",{attrs:{id:"_2-原型对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-原型对象"}},[t._v("#")]),t._v(" 2 原型对象")]),t._v(" "),a("p",[t._v("通过"),a("code",[t._v("new")]),t._v("调用构造函数创建的 100 个对象实例，独立拥有 100 套变量和方法。这在一些场景显然内存开销过大。我们就要通过原型对象去创建一些共享的变量和方法。")]),t._v(" "),a("h4",{attrs:{id:"_1）鉴别原型属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1）鉴别原型属性"}},[t._v("#")]),t._v(" 1）鉴别原型属性")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasPrototypeProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in 操作符判断是自有属性和原型属性")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同时满足该属性不是自有属性")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 那么就相当于是判断该属性是否是原型属性")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" object "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_2）-prototype-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2）-prototype-属性"}},[t._v("#")]),t._v(" 2）[[Prototype]] 属性")]),t._v(" "),a("p",[t._v("用内部属性 "),a("code",[t._v("[[Prototype]]")]),t._v("跟踪对象实例的原型对象。")]),t._v(" "),a("p",[t._v("当用new创建一个对象，构造函数的原型对象就会赋值给该对象的 "),a("code",[t._v("[[Prototype]]")]),t._v("属性")]),t._v(" "),a("ul",[a("li",[t._v("用 "),a("code",[t._v("Object.getPrototypeOf")]),t._v("读取 [[Prototype]]属性的值")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// obj 是泛用对象，所以都是指向 Object")]),t._v("\nprototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype\n")])])]),a("ul",[a("li",[t._v("大多数浏览器 JS 引擎给所有对象上增加了 "),a("code",[t._v("_proto_")]),t._v("的属性，可以直接读写 "),a("code",[t._v("[[Prototype]]")]),t._v("的值。但是这个有性能上的问题，所以 ES 标准建议使用2个替代的方法\n"),a("ul",[a("li",[a("strong",[t._v("Object.setPrototypeOf")]),t._v(" 改写[[prototype]]属性")]),t._v(" "),a("li",[t._v("**Object.getPrototypeOf **读取[[prototype]]属性")])])])]),t._v(" "),a("h4",{attrs:{id:"_3）在构造函数中使用原型对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3）在构造函数中使用原型对象"}},[t._v("#")]),t._v(" 3）在构造函数中使用原型对象")]),t._v(" "),a("blockquote",[a("p",[t._v("原型对象的机制让他们成为一次性为所有对象定义方法的理想手段")])]),t._v(" "),a("ul",[a("li",[t._v("通过原型对象增加变量或方法")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 给 Fn 构造函数的原型对象增加 getName 方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这样所有通过 Fn 创建的实例对象都可以该方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("要特别注意原型对象上的引用类型。因为内存也是共享的")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("protytype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建2个实例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作原型对象上的数组变量 arr")]),t._v("\nobj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nobj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nobj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1,2]，原型对象上的数组被修改2次，因为是引用类型")]),t._v("\n")])])]),a("ul",[a("li",[t._v("字面量形式替换原型对象")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字面量形式改变了原型对象属性，因为现在指向 Object 而不是 Fn。所以要重置该属性")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 且注意要放在第一行，避免在没有正确指向的时候调用了方法。")]),t._v("\n  constructor"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sayName")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_4）改变原型对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4）改变原型对象"}},[t._v("#")]),t._v(" 4）改变原型对象")]),t._v(" "),a("p",[t._v("简单来说就是后来增删的原型对象上的变量或属性，都会立即反应到所有实例上。")]),t._v(" "),a("p",[t._v("因为这个原型对象就是一个指向它的指针引用")]),t._v(" "),a("h4",{attrs:{id:"_5）内建对象的原型对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5）内建对象的原型对象"}},[t._v("#")]),t._v(" 5）内建对象的原型对象")]),t._v(" "),a("p",[t._v("就是可以修改一些内建对象的原型对象")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以自己重写以赋予更多能力")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实际开发不建议这样做，这会让新人无法确定该方法的作用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);